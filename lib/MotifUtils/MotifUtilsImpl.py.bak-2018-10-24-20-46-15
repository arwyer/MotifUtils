# -*- coding: utf-8 -*-
#BEGIN_HEADER
import MotifUtils.Utils.ParseMotifFile as PMF
#END_HEADER


class MotifUtils:
    '''
    Module Name:
    MotifUtils

    Module Description:
    A KBase module: MotifUtils
    '''

    ######## WARNING FOR GEVENT USERS ####### noqa
    # Since asynchronous IO can lead to methods - even the same method -
    # interrupting each other, you must be *very* careful when using global
    # state. A method could easily clobber the state set by another while
    # the latter method is running.
    ######################################### noqa
    VERSION = "0.0.1"
    GIT_URL = ""
    GIT_COMMIT_HASH = ""

    #BEGIN_CLASS_HEADER
    #END_CLASS_HEADER

    # config contains contents of config file in a hash or None if it couldn't
    # be found
    def __init__(self, config):
        #BEGIN_CONSTRUCTOR
        #END_CONSTRUCTOR
        pass


    def UploadMotifSet(self, ctx, params):
        """
        :param params: instance of type "UploadParams" (-commenting out for
           now typedef structure{ } ExportParams; typedef structure{ }
           ExportOutput; funcdef ExportMotifSet() returns ()  authentication
           required;) -> structure: parameter "ws_name" of String, parameter
           "object_name" of String, parameter "filepath" of String, parameter
           "format" of String
        :returns: instance of type "UploadOutput" -> structure: parameter
           "obj_ref" of String
        """
        # ctx is the context object
        # return variables are: output
        #BEGIN UploadMotifSet

        #What needs to happen here...
        #given a filepath, ws, obj_name, and format
        #Use the parsers we have in current code
        #Read the file specified by path in format
        #Create obj_name in ws
        #Return reference to object

        dfu = DataFileUtil(self.callback_url)
        #min = -1
        #max = -1
        #if 'motif_min_length' in params:
        #    min = params['motif_min_length']
        #if 'motif_max_length' in params:
        #    max = params['motif_max_length']


        #TODO: use python's optional paramter syntax
        #handle optional parameters
        location = 'NULL'
        dump = False
        if 'homer_locations' in params:
            location = params['homer_locations']
        if 'dump_json' in params:
            if params['dump_json']:
                dump = True




        MSO = PMF.BuildMotifSetFromFile(params['format'],params['filepath'],location,dump)

        save_objects_params = {}
        save_objects_params['id'] = dfu.ws_name_to_id(params['ws_name'])
        save_objects_params['objects'] = [{'type': 'KBaseGwasData.MotifSet' , 'data' : MSO , 'name' : params['object_name']}]

        info = dfu.save_objects(save_objects_params)[0]
        motif_set_ref = "%s/%s/%s" % (info[6], info[0], info[4])

        #END UploadMotifSet

        # At some point might do deeper type checking...
        if not isinstance(output, dict):
            raise ValueError('Method UploadMotifSet return value ' +
                             'output is not type dict as required.')
        # return the results
        return [output]

    def DownloadMotifSet(self, ctx, params):
        """
        :param params: instance of type "DownloadParams" -> structure:
           parameter "source_ref" of String, parameter "format" of String
        :returns: instance of type "DownloadOutput" -> structure: parameter
           "destination_dir" of String
        """
        # ctx is the context object
        # return variables are: output
        #BEGIN DownloadMotifSet
        #TODO: add this...
        #END DownloadMotifSet

        # At some point might do deeper type checking...
        if not isinstance(output, dict):
            raise ValueError('Method DownloadMotifSet return value ' +
                             'output is not type dict as required.')
        # return the results
        return [output]

    def voidfunc(self, ctx, junk):
        """
        :param junk: instance of String
        :returns: instance of String
        """
        # ctx is the context object
        # return variables are: outjunk
        #BEGIN voidfunc
        #END voidfunc

        # At some point might do deeper type checking...
        if not isinstance(outjunk, basestring):
            raise ValueError('Method voidfunc return value ' +
                             'outjunk is not type basestring as required.')
        # return the results
        return [outjunk]
    def status(self, ctx):
        #BEGIN_STATUS
        returnVal = {'state': "OK",
                     'message': "",
                     'version': self.VERSION,
                     'git_url': self.GIT_URL,
                     'git_commit_hash': self.GIT_COMMIT_HASH}
        #END_STATUS
        return [returnVal]
