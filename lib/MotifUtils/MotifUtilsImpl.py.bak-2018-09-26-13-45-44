# -*- coding: utf-8 -*-
#BEGIN_HEADER
#END_HEADER


class MotifUtils:
    '''
    Module Name:
    MotifUtils

    Module Description:
    A KBase module: MotifUtils
    '''

    ######## WARNING FOR GEVENT USERS ####### noqa
    # Since asynchronous IO can lead to methods - even the same method -
    # interrupting each other, you must be *very* careful when using global
    # state. A method could easily clobber the state set by another while
    # the latter method is running.
    ######################################### noqa
    VERSION = "0.0.1"
    GIT_URL = ""
    GIT_COMMIT_HASH = ""

    #BEGIN_CLASS_HEADER
    #END_CLASS_HEADER

    # config contains contents of config file in a hash or None if it couldn't
    # be found
    def __init__(self, config):
        #BEGIN_CONSTRUCTOR
        #END_CONSTRUCTOR
        pass


    def voidfunc(self, ctx, junk):
        """
        Insert your typespec information here.
        :param junk: instance of String
        :returns: instance of String
        """
        # ctx is the context object
        # return variables are: outjunk
        #BEGIN voidfunc
        #END voidfunc

        # At some point might do deeper type checking...
        if not isinstance(outjunk, basestring):
            raise ValueError('Method voidfunc return value ' +
                             'outjunk is not type basestring as required.')
        # return the results
        return [outjunk]
    def status(self, ctx):
        #BEGIN_STATUS
        returnVal = {'state': "OK",
                     'message': "",
                     'version': self.VERSION,
                     'git_url': self.GIT_URL,
                     'git_commit_hash': self.GIT_COMMIT_HASH}
        #END_STATUS
        return [returnVal]
